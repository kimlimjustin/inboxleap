# Multi-stage build for EmailTaskRouter backend
FROM public.ecr.aws/docker/library/node:20-alpine AS base

# Install pnpm directly without corepack (more reliable than corepack)
RUN npm install -g pnpm@9.12.3

WORKDIR /app

# Copy only package manifests to compute dependency graph
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/server/package.json ./apps/server/package.json
COPY packages/shared/package.json ./packages/shared/package.json

# Install workspace dependencies in a clean container store
FROM base AS deps
RUN --mount=type=cache,id=pnpm,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile --store-dir /root/.pnpm-store

# Copy source code after deps are installed
FROM deps AS build
COPY packages/shared/ ./packages/shared/
COPY apps/server/ ./apps/server/

# Normalize line endings for shell scripts
RUN apk add --no-cache dos2unix && \
    dos2unix /app/apps/server/start.sh || true

# Runtime image
FROM public.ecr.aws/docker/library/node:20-alpine AS runtime

# Install minimal runtime tools (include curl for ECS healthcheck)
RUN apk add --no-cache wget curl ca-certificates netcat-openbsd && update-ca-certificates || true

WORKDIR /app

# Copy node_modules and source from build stage
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/apps/server/node_modules ./apps/server/node_modules
COPY --from=build /app/packages/shared/node_modules ./packages/shared/node_modules
COPY --from=build /app/apps/server ./apps/server
COPY --from=build /app/packages/shared ./packages/shared

# Remove any .env files to prevent overriding production env vars
RUN rm -f /app/.env /app/apps/server/.env || true

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy startup script explicitly and ensure LF + executable
COPY --from=build /app/apps/server/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Change ownership
RUN chown -R nodejs:nodejs /app
USER nodejs

EXPOSE 3000

# Health check (works with curl, matching ECS task definition)
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the server with migrations
CMD ["/app/start.sh"]